#bits 4

#ruledef register
{
    a => 0b1000
    b => 0b0100
    pc => 0b0010
	sp => 0b0001
}

#ruledef flag
{
    z => 0b1000
    c => 0b0100
    b => 0b0010
	p => 0b0001
}

#ruledef
{
    nand => 0x0
    nor => 0x1
	not => 0x2
	add => 0x3
	sl =>  0x4
	sr => 0x5
	
	ld {r: register}, {value} =>
    {
        assert(r >= 0b0100)
        assert(r <= 0b1000)
        0x6 @ r @ value `4
    }
	
	ld {r: register}, {value} =>
    {
        assert(r >= 0b0001)
        assert(r <= 0b0010)
        0x6 @ r @ value `12
    }
		
	st {r: register}, {value} =>
    {
        assert(r >= 0b0100)
        assert(r <= 0b1000)
        0x7 @ r @ value `4
    }
	
	st {r: register}, {value} =>
    {
        assert(r >= 0b0001)
        assert(r <= 0b0010)
        0x7 @ r @ value `12
    }
	
	ldd {value : u12}, {r: register}  => 0x8 @ r @ value`12
	
	swp => 0x9
	
	psh {r: register}  => 0xa @ r
	pop {r: register}  => 0xb @ r
	jsr {addr : u12}  => 0xc @ addr`12
	ret => 0xd
	jmp {f: flag}, {addr: u12} => 0xe @ f @ addr`12
	clr {f: flag} => 0xf @ f
	
}

LD A,0     ; zero A Reg

loop:     ; calculation loop
LD B,1     ; Set B to 1
ADD       ; 1 in A Reg, 1 in B Reg
SWP      ; swap contents of A and B
LD A,15    ; 15 in A Reg, 1 in B Reg
NAND      ; 0001 in A Reg, 1 in B Reg
JMP Z,exit ; jump to exit if A = 0 (not true unless A and B == 15)
SWP      ; swap contents of A and B
LD PC,loop ; load address to loop into PC

exit:     ; end loop
LD PC,exit ; load address to exit into PC